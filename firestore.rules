rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // =====================================
    // USERS COLLECTION - Your existing user data
    // =====================================
    match /users/{userId} {
      // Users can read and write their own data
      allow read, write: if request.auth != null && request.auth.uid == userId;

      // Allow reading basic profile info for friend discovery (adults only)
      allow read: if request.auth != null
        && request.auth.uid != userId
        && resource.data.userCategory == 'adult'
        && resource.data.communityAccess == true
        && resource.data.privacyConsents.community == true;

      // Allow reading display name and photo for friend lists
      allow read: if request.auth != null
        && request.auth.uid != userId
        && ('displayName' in resource.data || 'photoURL' in resource.data);

      // User subcollections (paints, projects, etc.)
      match /{subcollection}/{document} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // =====================================
    // FRIEND REQUESTS COLLECTION
    // =====================================
    match /friendRequests/{requestId} {
      // Users can read requests where they are sender or recipient
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.fromUserId ||
        request.auth.uid == resource.data.toUserId
      );

      // Users can create requests if they have community access
      allow create: if request.auth != null
        && request.auth.uid == request.resource.data.fromUserId
        && request.resource.data.fromUserId != request.resource.data.toUserId
        && hasCommunityAccess()
        && isAdult();

      // Users can update requests they received (accept/decline)
      allow update: if request.auth != null
        && request.auth.uid == resource.data.toUserId
        && request.resource.data.status in ['accepted', 'declined']
        && hasCommunityAccess();

      // Users can delete requests they sent (cancel)
      allow delete: if request.auth != null
        && request.auth.uid == resource.data.fromUserId;
    }

    // =====================================
    // FRIENDSHIPS COLLECTION
    // =====================================
    match /friendships/{friendshipId} {
      // Users can read friendships where they are involved
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.user1Id ||
        request.auth.uid == resource.data.user2Id
      );

      // Users can create friendships (when accepting friend requests)
      allow create: if request.auth != null && (
        request.auth.uid == request.resource.data.user1Id ||
        request.auth.uid == request.resource.data.user2Id
      ) && hasCommunityAccess();

      // Users can update friendship settings
      allow update: if request.auth != null && (
        request.auth.uid == resource.data.user1Id ||
        request.auth.uid == resource.data.user2Id
      );

      // Users can delete friendships (unfriend)
      allow delete: if request.auth != null && (
        request.auth.uid == resource.data.user1Id ||
        request.auth.uid == resource.data.user2Id
      );
    }

    // =====================================
    // USER SOCIAL PROFILES COLLECTION
    // =====================================
    match /userSocial/{userId} {
      // Users can read and write their own social data
      allow read, write: if request.auth != null && request.auth.uid == userId;

      // Allow reading public social data for friend discovery (adults only)
      allow read: if request.auth != null
        && request.auth.uid != userId
        && resource.data.profileVisibility == 'public'
        && resource.data.userCategory == 'adult';
    }

    // =====================================
    // PAINT CATALOG - Global read access
    // =====================================
    match /paintCatalog/{paintId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isAdmin();
    }

    // =====================================
    // HELPER FUNCTIONS
    // =====================================

    // Check if user has community access
    function hasCommunityAccess() {
      return request.auth != null
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.communityAccess == true;
    }

    // Check if user is adult
    function isAdult() {
      return request.auth != null
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userCategory == 'adult';
    }

    // Check if user is admin
    function isAdmin() {
      return request.auth != null
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Check if target user allows friend requests
    function targetAllowsFriendRequests(targetUserId) {
      return get(/databases/$(database)/documents/userSocial/$(targetUserId)).data.allowFriendRequests == true;
    }
  }
}